//! Set of tests for methods that export fdec numbers to byte arrays or create fdec numbers from byte arrays.
#[macro_use]
extern crate fdec;

fdec32! {
    module dec,
    name Dec,
    length 3,
    scale 5
}

use dec::*;
use std::ops::Neg;

#[test]
fn test_to_be_bytes() {
    assert_eq!(Dec::zero().to_be_bytes(), [0; 13]);
    assert_eq!(
        Dec::ulp().to_be_bytes(),
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]
    );
    assert_eq!(
        Dec::ulp().neg().to_be_bytes(),
        [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]
    );
    assert_eq!(
        Dec::nan().to_be_bytes(),
        [0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    );
    assert_eq!(
        Dec::infinity().to_be_bytes(),
        [0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    );
    assert_eq!(
        Dec::neg_infinity().to_be_bytes(),
        [0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    );
    assert_eq!(
        Dec::new(true, [0xC1_C2_C3_C4, 0xB1_B2_B3_B4, 0xA1_A2_A3_A4]).to_be_bytes(),
        [0x01, 0xA1, 0xA2, 0xA3, 0xA4, 0xB1, 0xB2, 0xB3, 0xB4, 0xC1, 0xC2, 0xC3, 0xC4]
    );
}

#[test]
fn test_to_le_bytes() {
    assert_eq!(Dec::zero().to_le_bytes(), [0; 13]);
    assert_eq!(
        Dec::ulp().to_be_bytes(),
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]
    );
    assert_eq!(
        Dec::ulp().neg().to_le_bytes(),
        [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]
    );
    assert_eq!(
        Dec::nan().to_le_bytes(),
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02]
    );
    assert_eq!(
        Dec::infinity().to_le_bytes(),
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04]
    );
    assert_eq!(
        Dec::neg_infinity().to_le_bytes(),
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05]
    );
    assert_eq!(
        Dec::new(true, [0xC1C2C3C4, 0xB1B2B3B4, 0xA1A2A3A4]).to_le_bytes(),
        [0xC4, 0xC3, 0xC2, 0xC1, 0xB4, 0xB3, 0xB2, 0xB1, 0xA4, 0xA3, 0xA2, 0xA1, 0x01]
    );
}
